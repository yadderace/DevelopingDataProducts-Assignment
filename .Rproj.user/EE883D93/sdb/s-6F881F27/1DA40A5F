{
    "collab_server" : "",
    "contents" : "#\n# This is the server logic of a Shiny web application. You can run the \n# application by clicking 'Run App' above.\n#\n# Find out more about building applications with Shiny here:\n# \n#    http://shiny.rstudio.com/\n#\n\nlibrary(shiny)\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(cluster)\nlibrary(plyr)\n\n\n# Define server logic required to draw a histogram\nshinyServer(function(input, output) {\n  \n  values <- reactiveValues();\n  \n  # For save all clustered points.\n  values$dfResult <- data.frame(\n    x = numeric(0),\n    y = numeric(0),\n    cluster = numeric(0)\n  );\n  \n  # For save all new points.\n  values$dfNewPoints <- data.frame(\n    x = numeric(0),\n    y = numeric(0)\n  )\n  \n  # For save the cluster for points.\n  values$clusters <- NULL;\n  \n  # For save the centroids\n  values$centroids <- NULL;\n  \n  # Colors for clusters.\n  colors <- c(\"#550000\", \"#D46A6A\",\n              \"#FFD1AA\", \"#804515\",\n              \"#116611\", \"#88CC88\",\n              \"#003333\", \"#407F7F\",\n              \"#D4D369\", \"#555500\");\n  \n  # ==========================================================\n  # RENDERING\n  \n  # To render the plot\n  output$resultPlot <- renderPlot({\n    \n    dfData <- values$dfResult;\n    \n    if(is.null(dfData) | nrow(dfData) == 0) return(NULL);\n    \n    myPlot <- ggplot(mapping = aes(x = x, y = y))\n    \n    \n    # Verifying if there are clusters to set color\n    if(!is.null(values$clusters)){ \n      myPlot <- myPlot + geom_point(dfData, size = 3, mapping = aes(color = as.factor(values$clusters))) +\n        scale_colour_manual(values = colors[1:input$slideClusters])\n      \n      \n      # Checking if it is necessary to plot areas.\n      if(\"area\" %in% input$configuration){\n        \n        dfData$cluster <- values$clusters;\n        \n        # Getting the convex hull of each unique point set\n        fncFindHull <- function(dfTemp) dfTemp[chull(dfTemp$x, dfTemp$y), ]\n        hulls <- ddply(dfData, \"cluster\", fncFindHull)\n        \n        \n        myPlot <- myPlot + geom_polygon(data = hulls, alpha = 0.5, aes(colour = as.factor(cluster), fill = as.factor(cluster))) +\n          scale_fill_manual(values = colors[1:input$slideClusters]);\n        \n        \n        dfData$cluster <- NULL;\n      }\n      \n      # Checking if it is necessary to plot centroids.\n      if(\"centroids\" %in% input$configuration){\n        myPlot <- myPlot + geom_point(values$centroids, shape = 4, size = 3.5, mapping = aes())\n      }\n      \n    }\n    else { myPlot <- myPlot + geom_point(dfData, size = 3.5, mapping = aes()); }\n    \n    # Verifying if there are new points to set\n    if(nrow(values$dfNewPoints) > 0){ \n      myPlot <- myPlot + geom_point(values$dfNewPoints, size = 2, mapping = aes()); \n    }\n    \n    # Setting axis limits\n    myPlot <-  myPlot +\n      theme(legend.position = \"none\") +\n      xlim(0, 105) +\n      ylim(0, 105);\n    \n    return(myPlot)\n  });\n  \n  # ==========================================================\n  # EVENTS\n  \n  # To generate random data\n  observeEvent(input$btnGenerate, {\n    \n    qtyPoints <- input$slidePoints\n    \n    isolate(\n      values$dfResult <- data.frame(\n      x = runif(qtyPoints, min = 0, max = 100),\n      y = runif(qtyPoints, min = 0, max = 100)\n    ));\n    \n    isolate(\n      values$clusters <- NULL\n    );\n    \n    isolate(\n      values$dfNewPoints <- data.frame(\n        x = numeric(0),\n        y = numeric(0)\n      )\n    );\n    \n    shinyjs::enable(\"btnCluster\");\n    \n  });\n  \n  # To add a new point\n  observeEvent(input$plotClick, {\n    \n    if(is.null(input$plotClick$x)) return(NULL);\n    \n    newX <- input$plotClick$x;\n    newY <- input$plotClick$y;\n    \n    isolate(\n      values$dfNewPoints <- rbind(values$dfNewPoints, data.frame(x = newX, y = newY))\n    );\n    \n  });\n  \n  # To make clusters\n  observeEvent(input$btnCluster, {\n    \n    if(is.null(values$dfResult)) return(NULL);\n    \n    dfTemp <- data.frame(x = values$dfResult$x, y = values$dfResult$y)\n    \n    dfTemp <- rbind(dfTemp, values$dfNewPoints)\n    \n    isolate(\n      values$dfNewPoints <- data.frame(\n        x = numeric(0),\n        y = numeric(0))\n    );\n    \n    objCluster <- kmeans(dfTemp, centers = input$slideClusters);\n    \n    isolate(values$dfResult <- dfTemp);\n    isolate(values$clusters <- objCluster$cluster);\n    isolate(values$centroids <- data.frame(objCluster$centers)); \n    \n  })\n  \n})\n",
    "created" : 1578236115056.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "135|33|146|2|\n",
    "hash" : "3708041597",
    "id" : "1DA40A5F",
    "lastKnownWriteTime" : 1578258895,
    "last_content_update" : 1578262987445,
    "path" : "C:/Users/yadde/Documents/Developing Data Products Assignment/ShinnyApplication/server.R",
    "project_path" : "ShinnyApplication/server.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}